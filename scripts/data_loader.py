"""
Script to parse PubMed XML into DataFrame 

Note: XML generated by https://pubmed2xl.com/xml/, since new version of PubMed no longer allows exporting as XML
"""

from lxml import etree
import pandas as pd
from pathlib import Path

from typing import List, Dict

def parse_tree(xml_path: str):
	"""
	Parse ETree from specified XML path
	"""
	pathlib_path = Path(xml_path).expanduser()
	if not pathlib_path.exists():
		raise FileNotFoundError
	try:
		return etree.parse(pathlib_path)
	except (etree.XMLSyntaxError, etree.ParseError):
		raise IOError

def _return_default_text(node, default_text: str = "") -> str:
	"""
	Return ETree node's text attribute or default text when the node doesn't have 'text' attribute
	"""
	return node.text if (node is not None) and (node.text is not None) else default_text

def parse_pmid(singleTree) -> Dict[str, str]:
	"""
	Return PMID of ETree of single article
	"""
	node = singleTree.find(".//PMID")
	return {
		"pmid": _return_default_text(node)
	}

def parse_title(singleTree) -> Dict[str, str]:
	"""
	Return Title of ETree of single article
	"""
	node = singleTree.find(".//ArticleTitle")
	return {
		"title": _return_default_text(node)
	}

def parse_abstract(singleTree) -> Dict[str, str]:
	"""
	Return Abstract of ETree of single article
	"""
	node = singleTree.find(".//AbstractText")
	return {
		"abstract": _return_default_text(node)
	}

def parse_journal_meta(singleTree) -> Dict[str, str]:
	"""
	Return Journal Metadata (Name, ISSN, Volume, Issue, Publication date) of ETree of single article
	"""
	node_dict = {
		"journal_name": singleTree.find(".//Journal/Title"),
		"journal_issn": singleTree.find(".//Journal/ISSN"),
		"journal_vol": singleTree.find(".//Journal//Volume"),
		"journal_issue": singleTree.find(".//Journal//Issue"),
		"journal_publish_year": singleTree.find(".//Journal//PubDate/Year"),
		"journal_publish_month": singleTree.find(".//Journal//PubDate/Month"),
		"journal_publish_day": singleTree.find(".//Journal//PubDate/Day")
	}
	return {key: _return_default_text(val)for key, val in node_dict.items()}

def parse_article_meta(singleTree) -> Dict[str, str]:
	"""
	Return PMID, PMC, and DOI of ETree of single article
	"""
	node_list = singleTree.findall(".//PubmedData/ArticleIdList/ArticleId")
	return {
		node.get("IdType"): node.text for node in node_list # here, node is not None for sure
	}

def parse_author_meta(singleTree) -> Dict[str, str]:
	"""
	Return Author Metadata (Name, Affiliation) of ETree of single article
	- Author names separated by ;
	- Affiliations separated by ;; for different authors, ; for different affiliation within authors
	"""
	node_list = singleTree.findall(".//Author")
	name_list = [f"{_return_default_text(node.find('LastName'))}, {_return_default_text(node.find('ForeName'))}" for node in node_list]
	affiliation_list = [_return_default_text(node.find('.//Affiliation')) for node in node_list]
	
	return {
		"author_names": "; ".join(name_list),
		"author_affiliations": ";; ".join(affiliation_list)
	}

def parse_subject(singleTree) -> Dict[str, str]:
	"""
	Return Subjects of ETree of single article as a single string separated by ;
	"""
	node_list = singleTree.findall(".//DescriptorName")
	name_list = [_return_default_text(node) for node in node_list]
	return {
		"subjects": "; ".join(name_list)
	}

def parse_keyword(singleTree) -> Dict[str, str]:
	"""
	Return Keywords of ETree of single article as a single string separated by ;
	"""
	node_list = singleTree.findall(".//Keyword")
	name_list = [_return_default_text(node) for node in node_list]
	return {
		"keywords": "; ".join(name_list)
	}

def parse_ref_pmid(singleTree) -> Dict[str, str]:
	"""
	Return PMIDs of articles on reference of ETree of single article as a single string separated by ;
	"""
	node_list = singleTree.findall(".//Reference//ArticleId[@IdType='pubmed']")
	name_list = [_return_default_text(node) for node in node_list]
	return {
		"ref_PMIDs": "; ".join(name_list)
	}

def parse_single_tree(singleTree) -> Dict[str, str]:
	"""
	Parse a single-article ETree using all the parse functions defined above
	"""
	return parse_pmid(singleTree) | parse_title(singleTree) | parse_abstract(singleTree) | parse_journal_meta(singleTree) | parse_article_meta(singleTree) | parse_author_meta(singleTree) | parse_subject(singleTree) | parse_keyword(singleTree) | parse_ref_pmid(singleTree)

def parse_all_tree(multiTree) -> List[Dict[str, str]]:
	"""
	Parse a multi-article ETree using all the parse functions defined above
	"""
	return [parse_single_tree(tree) for tree in multiTree.findall(".//PubmedArticle")]

def create_df(multiTree) -> pd.DataFrame:
	"""
	Create Dataframe from a multi-article ETree
	"""
	data = parse_all_tree(multiTree)
	return pd.DataFrame.from_records(data)

def query_df(pat: str, df: pd.DataFrame) -> pd.DataFrame:
	"""
	Query pattern on dataframe's 'abstract'
	"""
	# if not isinstance(pat, str):
	# 	raise TypeError

	return df[df["abstract"].str.lower().str.contains(pat.lower())]